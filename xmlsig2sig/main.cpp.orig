//
// File main.cpp
//
// Main drive of the code that will check for two file names.
// The first argument is the file that will be read to convert to the next file.
// The secon argument is the file that will be created with converted from first file.
//
// Author: carlos.negron.nyc@gmail.com 
//
//
//
//


//#include <xercesc/dom/DOM.hpp>
#include <xercesc/parsers/XercesDOMParser.hpp>
//#include <xercesc/dom/DOMElement.hpp>
//#include <xercesc/util/PlatformUtils.hpp>
#include <iostream>
#include <string>

using namespace std;
using namespace xercesc;

/*
void checkArgs(int argc, char** argv) {
  if (argc < 3) {
      cout << "Error Incorrect Arguments" << endl;
      cout << "Usage: xml2sigxml <filename> <filename>" << endl;
  }
}

string getFileNameToRead(char** argv) {
    return "";
}

string getFileNameToWrite(char** argv) {
    return "";
}


void processFiles(const string& fileIn, const string& fileOut) {
    cout << fileIn << " " << fileOut << endl;
    try {
        XMLPlatformUtils::Initialize();
    } catch (const XMLException& toCatch ) {
        cerr << "exception caught" << endl;
    }
    XercesDOMParser* parser = new XercesDOMParser();
    cout << "parser start " << parser << endl;
    char* filename = (char*)"Target_12_c_2019025.tkl";
    try {
        cout << "Recieved file " << filename << endl;
        parser->parse(filename);
        cout << "recievdded doc " << parser << endl;
        DOMDocument* doc = parser->getDocument();
        if (doc->getNodeType() == DOMNode::ELEMENT_NODE) {
            cout << doc->getNodeName() << endl;
        } else {
        //    DOMNodeList childrent = doc->getChildNodes();
            cout << "got child node" << endl;
        }
    } catch ( const XMLException& toCatch ) {
        cerr << "exception caught in parsing" << endl;
    }
    XMLPlatformUtils::Terminate();
}
*/

//int main(int argc, char** argv ) {
int main() {
    cout << "processing files" << endl;
    //checkArgs(argc, argv);
    //string fileIn = getFileNameToRead(argv);
    //string fileOut = getFileNameToWrite(argv);
    //processFiles(fileIn, fileOut);
    //processFiles("test", "test1");
    cout << "finished" << endl;
    return 0;
}
